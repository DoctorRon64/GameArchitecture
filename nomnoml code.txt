[Terraria NPC System - Ivar|
//Objects ------------------------

//Interfaces
[IDamagable|
int Health { get: set }
void TakeDamage();
void Die();
]

//NPC Data
[NPCDataScriptableObject|
public NPCData Guide;
public NPCData Merchant;
public NPCData etc....
]

[NPCData|
public int Id { get: private set }
public int Happiness { get: private set }
public Vector2 RoomLocation { get: private set }
public Room RoomRequirements { get: private set }
]

//NPC Manager
[NPCManager|
private List<NPC> = new List<NPC>();
private void Initialise()
private bool CheckIfShouldSpawnNPC(NPC npc);
]

//ActorBase
[ActorBase|
public virtual void MoveTo()
private StateMachine MovementState
]

//NPC
[NPC|
private int id { get: set: }
private int health { get: set: }
private int happiness { get: set: }
private Vector2 roomLocation { get: set: }
private List<Item> TradableItemsList = new List<Item>()

public NPC(int _id, int _health, int _happiness, Vector2 roomLocation)
private bool CheckIfRoomIsAvailable()
private void ChangeState();
]

//NPCStates 
[BaseState|
protected GameObject ownerGO
protected StateMachine owner
public void SetOwner(StateMachine owner)
public virtual void OnAwake()
public abstract void OnStart()
public abstract void OnUPS()
public abstract void OnExit()
]

[NPCIdleState]
[NPCAttackState]
[NPCTradingState]

//Interactions with world
[NPCDialogueButton]
[NPCDialogueWindow]
[Player]

//Associations --------------------

//NPC Data
[NPCDataScriptableObject] +- [NPCData]

//NPC Manager
[NPCDataScriptableObject] <-- [NPCManager]

//ActorBase
[IDamagable] <:- [ActorBase]

//NPC
[NPCManager] <--> [NPC]
[ActorBase] <:- [NPC]
[NPCIdleState] - [NPC] 
[NPCAttackState] - [NPC] 
[NPCTradingState] - [NPC] 

//NPCStates
[BaseState] <:- [NPCIdleState]
[BaseState] <:- [NPCAttackState]
[BaseState] <:- [NPCTradingState]

//Interactions with world
[Player] Triggers -> [NPCDialogueButton]
[NPCDialogueButton] -> [NPCDialogueWindow]
[NPCManager] <-- [NPCDialogueButton]
[NPC] -- [NPCDialogueWindow]
]


