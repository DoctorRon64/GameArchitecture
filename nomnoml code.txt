Philip
//TerrainGenerator
[GameManager | 
Void Awake() or Start()
]->
[TerrariaBiomesGenerator (Philip) |

[TerrainGenerator ScriptableObject |
public TileGrid;
public Dictionary<Tile, Location> allTiles;
public Dictionary<Biome, Location> allBiomes;
public noiseMap seed;
]<->

//Generate Biome
[BiomeGenerator |
	void ChangeOneRandomBlock(RandomLocation) {
    	if (ValidTerrainType(RandomLocation) && 
        allBiomes(RandomLocation) <= allBiomes(RandomLocation).maxBiomeSize {
        	CheckAroundBlock();
			if (ValidTerrainType(NewLocation){
            	RedoSteps;
] ->

[ValidTerrainType |
	bool IsThisValidTerrainType(RandomLocation) {
    	if (allTiles.ContainsKey(RandomLocation) ITerrainType != air) {
        	return true;
    	} return false;
]

//Biome Cluster aan tile
[ BiomeBase |
	TerrainType: property;
	List<Tile> allTiles;
    MaxBiomeSize: property;
	Name: String;
]-:>[Biome |
    TerrainType: Snowy
    List<Tile> allTiles;
    MaxBiomeSize: 100;
]

//een Block
[TileBase |
    TerrainType: properties;
	HasOuterSkin : Bool;
    OuterSkin: Position;
    CanHaveOuterSkin: Bool;
    CanFolliageBePlaced: Bool;
]-:>
[Tile |
	TerrainType: Snowy;
    HasOuterSkin: True;
    OuterSkin: Top;
    CanHaveOuterSkin: True;
    CanFolliageBePlaced: True;
]

//Forest, Desert, Taiga, Snowy
[ITerrainType |
	Folliage: Bool;
    FolliageChangeAmount;
    CanSpawnTree: Bool;
    Name: String;
]

[ValidTerrainType] -> [ITerrainType]
[ValidTerrainType] -> [Biome]
[BiomeGenerator] BiomeAmount*-> [Biome]
[Biome] -> [Tile]
[Tile] --:> [ITerrainType]
[Biome] --:> [ITerrainType]
] 


[Terraria NPC System - Ivar|
//Objects ------------------------

//Interfaces
[IDamagable|
int Health { get: set }
void TakeDamage();
void Die();
]

//NPC Data
[NPCDataScriptableObject|
public NPCData Guide;
public NPCData Merchant;
public NPCData etc....
]

[NPCData|
public int Id { get: private set }
public int Happiness { get: private set }
public Vector2 RoomLocation { get: private set }
public Room RoomRequirements { get: private set }
]

//NPC Manager
[NPCManager|
private List<NPC> = new List<NPC>();
private void Initialise()
private bool CheckIfShouldSpawnNPC(NPC npc);
]

//ActorBase
[ActorBase|
public virtual void MoveTo()
private StateMachine MovementState
]

//NPC
[NPC|
private int id { get: set: }
private int health { get: set: }
private int happiness { get: set: }
private Vector2 roomLocation { get: set: }
private List<Item> TradableItemsList = new List<Item>()

public NPC(int _id, int _health, int _happiness, Vector2 roomLocation)
private bool CheckIfRoomIsAvailable()
private void ChangeState();
]

//NPCStates 
[BaseState|
protected GameObject ownerGO
protected StateMachine owner
public void SetOwner(StateMachine owner)
public virtual void OnAwake()
public abstract void OnStart()
public abstract void OnUPS()
public abstract void OnExit()
]

[NPCIdleState]
[NPCAttackState]
[NPCTradingState]

//Interactions with world
[NPCDialogueButton]
[NPCDialogueWindow]
[Player]

//Associations --------------------

//NPC Data
[NPCDataScriptableObject] +- [NPCData]

//NPC Manager
[NPCDataScriptableObject] <-- [NPCManager]

//ActorBase
[IDamagable] <:- [ActorBase]

//NPC
[NPCManager] <--> [NPC]
[ActorBase] <:- [NPC]
[NPCIdleState] - [NPC] 
[NPCAttackState] - [NPC] 
[NPCTradingState] - [NPC] 

//NPCStates
[BaseState] <:- [NPCIdleState]
[BaseState] <:- [NPCAttackState]
[BaseState] <:- [NPCTradingState]

//Interactions with world
[Player] Triggers -> [NPCDialogueButton]
[NPCDialogueButton] -> [NPCDialogueWindow]
[NPCManager] <-- [NPCDialogueButton]
[NPC] -- [NPCDialogueWindow]
]

